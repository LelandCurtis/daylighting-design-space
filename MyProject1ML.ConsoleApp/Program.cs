// This file was auto-generated by ML.NET Model Builder. 

using System;
using System.IO;
using System.Linq;
using Microsoft.ML;
using MyProject1ML.Model;

namespace MyProject1ML.ConsoleApp
{
    class Program
    {
        //Dataset to use for predictions 
        private const string DATA_FILEPATH = @"C:\Users\Deaton\Desktop\D\CODE\Hackathon\2019-0925 Daylighting Design Space - Trainer.csv";

        static void Main(string[] args)
        {
            // Create single instance of sample data from first line of dataset for model input
            ModelInput sampleData = CreateSingleDataSample(DATA_FILEPATH);

            // Make a single prediction on the sample data and print results
            ModelOutput predictionResult = ConsumeModel.Predict(sampleData);

            Console.WriteLine("Using model to make single prediction -- Comparing actual Out_sDA300 with predicted Out_sDA300 from sample data...\n\n");
            Console.WriteLine($"in:location: {sampleData.In_location}");
            Console.WriteLine($"in:Orientation: {sampleData.In_Orientation}");
            Console.WriteLine($"in:ObstructAngle: {sampleData.In_ObstructAngle}");
            Console.WriteLine($"in:Width: {sampleData.In_Width}");
            Console.WriteLine($"in:Depth: {sampleData.In_Depth}");
            Console.WriteLine($"in:Ceiling Height: {sampleData.In_Ceiling_Height}");
            Console.WriteLine($"in:Wall Thickness: {sampleData.In_Wall_Thickness}");
            Console.WriteLine($"in:Window Width: {sampleData.In_Window_Width}");
            Console.WriteLine($"in:Window Bottom Sill: {sampleData.In_Window_Bottom_Sill}");
            Console.WriteLine($"in:Window Top Sill: {sampleData.In_Window_Top_Sill}");
            Console.WriteLine($"in:Spacing Between Windows: {sampleData.In_Spacing_Between_Windows}");
            Console.WriteLine($"in:WWR: {sampleData.In_WWR}");
            Console.WriteLine($"in:Ceiling Reflectance: {sampleData.In_Ceiling_Reflectance}");
            Console.WriteLine($"in:Wall Reflectance: {sampleData.In_Wall_Reflectance}");
            Console.WriteLine($"in:Floor Reflectance: {sampleData.In_Floor_Reflectance}");
            Console.WriteLine($"in:Shade Trigger Distance (1000 direct): {sampleData.In_Shade_Trigger_Distance__1000_direct_}");
            Console.WriteLine($"\n\nActual Out_sDA300: {sampleData.Out_sDA300} \nPredicted Out_sDA300 value {predictionResult.Prediction} \nPredicted Out_sDA300 scores: [{String.Join(",", predictionResult.Score)}]\n\n");
            Console.WriteLine("=============== End of process, hit any key to finish ===============");
            Console.ReadKey();
        }

        // Change this code to create your own sample data
        #region CreateSingleDataSample
        // Method to load single row of dataset to try a single prediction
        private static ModelInput CreateSingleDataSample(string dataFilePath)
        {
            // Create MLContext
            MLContext mlContext = new MLContext();

            // Load dataset
            IDataView dataView = mlContext.Data.LoadFromTextFile<ModelInput>(
                                            path: dataFilePath,
                                            hasHeader: true,
                                            separatorChar: ',',
                                            allowQuoting: true,
                                            allowSparse: false);

            // Use first line of dataset as model input
            // You can replace this with new test data (hardcoded or from end-user application)
            ModelInput sampleForPrediction = mlContext.Data.CreateEnumerable<ModelInput>(dataView, false)
                                                                        .First();
            return sampleForPrediction;
        }
        #endregion
    }
}
